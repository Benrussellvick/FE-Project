// Clear fix
// -------------------------
@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Visibility
// -------------------------
/* hide from screen but can still be read by screen readers */

@mixin hidden-visibly {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

// Centering
// -------------------------
@mixin vertical-align($position: relative) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);
}

@mixin centerer {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Grid generation
// -------------------------
@mixin calc-grid-column($index, $class, $type) {
  @if ($type==width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type==push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type==push) and ($index==0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type==pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type==pull) and ($index==0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type==offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

@mixin make-grid($class) {
  @include loop-grid-columns($grid-columns, $class, width); //uncomment if you need to use these...
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, offset);
}

// Sprite generation
// -------------------------
////
/// @author Mike Street
/// @group Sprite
////
/// Convert pixels to ems
///
/// @param {Number} $px - value to convert
/// @param {Number} $base-fontsize ($base-font-size) - `<body>` font size
///
/// @example scss
///  $font-size-in-ems: mq-px2em(16px);
///  p { font-size: mq-px2em(16px); }
///
/// @requires $base-font-size
/// @returns {Number}
@function mq-px2em($px, $base-fontsize: $base-font-size) {
  @return $px;
}

/// Add class for <IE9 sprite fallback
/// @group sprite
/// @type String
$ieSprite: '.lt-ie9' !default;
/// Set the `$sprite` map
/// @group sprite
$sprite: map-get($icons, sprite) !default;
/// Retrive an attributes value for a specific icon in the sprite map
/// @param {string} $icon - The name of the icon
/// @param {string} $attr - The attribute you wish to retrieve (e.g. width)
@function sprite-attr($icon, $attr) {
  $newIcon: map-get($icons, $icon);
  @if $newIcon==null {
    @warn "Can't find an icon with the name #{$icon}";
  }
  @return map-get($newIcon, $attr);
}

/// Create a map with the specified icon of attributes
/// @param {string} $icon - The name of the icon
@function icon-attr($icon) {
  $attr: ( width: sprite-attr($icon, width), height: sprite-attr($icon, height), x: sprite-attr($icon, backgroundX), y: sprite-attr($icon, backgroundY));
  @return $attr;
}

/// Get the width of an icon in em
/// @param {string} $icon - The name of the icon
@function icon_width($icon) {
  @return mq-px2em(sprite-attr($icon, width));
}

/// Get the height of an icon in em
/// @param {string} $icon - The name of the icon
@function icon_height($icon) {
  @return mq-px2em(sprite-attr($icon, height));
}

/// Assign the correct SVG background image and dimensions to the element
%sprite {
  display: inline-block;
  background-image: url(map-get($sprite, svgPath));
  background-size: mq-px2em(map-get($sprite, width)) mq-px2em(map-get($sprite, height));
}

/// Add an SVG sprite icon using em positioning, with a PNG icon for browsers with the `$ieSprite` class using px positioning
/// @param {string} $icon - The name of the icon
/// @param {string} $type [all] - The properties wanted (can be `all`, `size` or `bg`).
/// - `all` ensures the icon has the background, position and size.
/// - `size` is just for dimensions
/// - `bg` just  applies the backgrounds to an element
/// @example scss - Usage
/// .class {
///     @include sprite(arrow);
///     &:hover {
///         @include sprite(arrowDown, bg)
///     }
/// }
///
/// @example css - Output
/// .class {
///     display: inline-block;
///     background-image: url("../img/sprite.svg");
///     background-size: 34.25em 32.1875em;
/// }
///
/// .lt-ie9 .class {
///     background-image: url("../img/sprite.png");
/// }
///
/// .class {
///     width: 1.3125em;
///     height: 1.3125em;
///     background-position: -0.3125em -0.3125em;
/// }
/// .lt-ie9 .class {
///     width: 20px;
///     height: 20px;
///     background-position: -5px -5px;
/// }
/// .class:hover {
///     background-position: -2.25em -2.25em;
/// }
/// .lt-ie9 .class:hover {
///     background-position: -36px -36px;
/// }
@mixin sprite($icon, $type: all) {
    @if $type == all {
        // Shares the backgrounds
        @extend %sprite;
    }

    $iconMap: icon-attr($icon);

    // Outputs dimensions in em
    @if $type == all or $type == size {
        width: mq-px2em(map-get($iconMap, width) + 1);
        height: mq-px2em(map-get($iconMap, height) + 1);
    }

    // Outputs background position in em
    @if $type == all or $type == bg {
        background-position: mq-px2em(map-get($iconMap, x) - 5) mq-px2em(map-get($iconMap, y) - 5);
    }

}

// Transition mixin
@mixin transition($prop, $values...) {
  -moz-#{$prop}: $values;
  -ms-#{$prop}: $values;
  -o-#{$prop}: $values;
  -webkit-#{$prop}: $values;
  $prop: $values;
}
// Use as follows
// div {
//   @include transition(transition, color 1s linear, background-color 1s ease-out, border-color 1s ease-in);
//   /* transition shorthand property can animate multiple CSS properties */
// }
// div {
//   @include transition(transition-delay, 0.5s)
// }


@mixin scrimGradient($startColor: $color-black, $direction: 'to bottom') {

  $scrimCoordinates: (
    0: 0.85,
    19: 0.710,
    34: 0.541,
    47: 0.382,
    56.5: 0.278,
    65: 0.194,
    73: 0.126,
    80.2: 0.075,
    86.1: 0.042,
    91: 0.021,
    95.2: 0.008,
    98.2: 0.002,
    100: 0
  );

  $hue: hue($startColor);
  $saturation: saturation($startColor);
  $lightness: lightness($startColor);
  $stops: ();

  @each $colorStop, $alphaValue in $scrimCoordinates {
    $stop: hsla($hue, $saturation, $lightness, $alphaValue) percentage($colorStop/100);
    $stops: append($stops, $stop, comma);
  }

  background: linear-gradient(unquote($direction), $stops);

}